<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CSjiabin&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://csjiabin.github.io/"/>
  <updated>2018-10-18T07:25:59.064Z</updated>
  <id>https://csjiabin.github.io/</id>
  
  <author>
    <name>csjiabin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 易错知识点整理</title>
    <link href="https://csjiabin.github.io/2018/10/18/JavaScript%E6%98%93%E9%94%99%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <id>https://csjiabin.github.io/2018/10/18/JavaScript易错知识点整理/</id>
    <published>2018-10-18T04:16:07.000Z</published>
    <updated>2018-10-18T07:25:59.064Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>上面的 test 函数作用域中声明并赋值了 a，且在 console 之上，所以遵循就近原则输出 a 等于 2。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">test2();</span><br></pre></td></tr></table></figure><p>上方的函数作用域中虽然声明并赋值了 a，但位于 console 之下，a 变量被提升，输出时已声明但尚未被赋值，所以输出 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">test3();</span><br></pre></td></tr></table></figure><p>上方的函数作用域中 a 被重新赋值，未被重新声明，且位于 console 之下，所以输出全局作用域中的 a。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// b is not undefined</span></span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">test4();</span><br></pre></td></tr></table></figure><p>上方的函数作用域中使用了 ES6 的 let 重新声明了变量 b，而 let 不同于 var 其不存在变量提升的功能，所以输出报错<code>b is not undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test5</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line">test5();</span><br></pre></td></tr></table></figure><p>上方的函数作用域中用 let 声明了 a 为 1，并在块级作用域中声明了 a 为 2，因为 console 并不在函数内的块级作用域中，所以输出 1。</p><h3 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [],</span><br><span class="line">  arr2 = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr === arr2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上方两个不同的数组比较，console 为 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [],</span><br><span class="line">  arr2 = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr === arr2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上方两个相同的数组比较，因为两个单独的数组永不相等，所以 console 为 false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [],</span><br><span class="line">  obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr === <span class="keyword">typeof</span> obj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上方利用 typeof 比较数组和对象，因为 typeof 获取<code>null</code>、<code>数组</code>、<code>对象</code>的类型都为<code>object</code>，所以 console 为 true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上方利用 instanceof 判断一个变量是否属于某个对象的实例，因为在 JavaScript 中数组也是对象的一种，所以两个 console 都为 true。</p><h3 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"xiaoming"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getName()); <span class="comment">// xiaoming</span></span><br></pre></td></tr></table></figure><p>上方对象方法中的 this 指向对象本身，所以输出 xiaoming</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"xiaoming"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> nameFn = obj.getName;</span><br><span class="line"><span class="built_in">console</span>.log(nameFn()); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>上方将对象中的方法赋值给了一个变量，此时方法中的 this 也将不再指向 obj 对象，从而指向 window 对象，所以 console 为 undefined。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"xiaoming"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">"xiaohua"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nameFn = obj.getName;</span><br><span class="line"><span class="built_in">console</span>.log(nameFn.apply(obj2)); <span class="comment">// xiaohua</span></span><br></pre></td></tr></table></figure><p>上方同样将 obj 对象中的方法赋值给了变量 nameFn，但是通过 apply 方法将 this 指向了 obj2 对象，所以最终 console 为 xiaohua。</p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test6</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)); <span class="comment">// [1,2]</span></span><br><span class="line">&#125;</span><br><span class="line">test6(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>上方利用函数中的 arguments 类数组对象获取传入函数的参数数组，所以输出数组[1, 2]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test7</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)); <span class="comment">// 未执行到此，无输出</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">test7(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>上方同样利用 arguments 获取参数，但因 test7(1, 2)未执行 return 中的函数，所以无输出。若执行 test7(1, 2)(3, 4)则会输出[3, 4]。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test8</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)); <span class="comment">// [1,2,3,4]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(args,<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">test8(...args);</span><br></pre></td></tr></table></figure><p>上方利用 Array.prototype.push.call()方法向 args 数组中插入了 3 和 4，并利用 ES6 延展操作符(…)将数组展开并传入 test9，所以 console 为[1, 2, 3, 4]。</p><h3 id="闭包问题"><a href="#闭包问题" class="headerlink" title="闭包问题"></a>闭包问题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>); <span class="comment">// 如果页面上有5个div</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elem.length; i++) &#123;</span><br><span class="line">  elem[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i); <span class="comment">//总是5</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方是一个很常见闭包问题，点击任何 div 弹出的值总是 5，因为当你触发点击事件的时候 i 的值早已是 5，可以用下面方式解决：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>); <span class="comment">// 如果页面上有5个div</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elem.length; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">    elem[j].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(j); <span class="comment">// 依次为 0，1，2，3，4</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在绑定点击事件外部封装一个立即执行函数，并将 i 传入该函数即可。</p><h3 id="对象拷贝与赋值"><a href="#对象拷贝与赋值" class="headerlink" title="对象拷贝与赋值"></a>对象拷贝与赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"xiaoming"</span>,</span><br><span class="line">  age: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newObj = obj;</span><br><span class="line">newObj.name = <span class="string">"xiaohua"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// xiaohua</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.name); <span class="comment">// xiaohua</span></span><br></pre></td></tr></table></figure><p>上方我们将 obj 对象赋值给了 newObj 对象，从而改变 newObj 的 name 属性，但是 obj 对象的 name 属性也被篡改，这是因为实际上 newObj 对象获得的只是一个内存地址，而不是真正的拷贝，所以 obj 对象被篡改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  name: <span class="string">"xiaoming"</span>,</span><br><span class="line">  age: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newObj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj2, &#123; <span class="attr">color</span>: <span class="string">"blue"</span> &#125;);</span><br><span class="line">newObj2.name = <span class="string">"xiaohua"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2.name); <span class="comment">// xiaoming</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj2.name); <span class="comment">// xiaohua</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj2.color); <span class="comment">// blue</span></span><br></pre></td></tr></table></figure><p>上方利用 Object.assign()方法进行对象的深拷贝可以避免源对象被篡改的可能。因为 Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">  name: <span class="string">"xiaoming"</span>,</span><br><span class="line">  age: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> newObj3 = <span class="built_in">Object</span>.create(obj3);</span><br><span class="line">newObj3.name = <span class="string">"xiaohua"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj3.name); <span class="comment">// xiaoming</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj3.name); <span class="comment">// xiaohua</span></span><br></pre></td></tr></table></figure><p>我们也可以使用 Object.create()方法进行对象的拷贝，Object.create()方法可以创建一个具有指定原型对象和属性的新对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;变量作用域&quot;&gt;&lt;a href=&quot;#变量作用域&quot; class=&quot;headerlink&quot; title=&quot;变量作用域&quot;&gt;&lt;/a&gt;变量作用域&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://csjiabin.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://csjiabin.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Mathjax与KaTex渲染数学公式</title>
    <link href="https://csjiabin.github.io/2018/09/16/Mathjax%E4%B8%8EKaTex%E6%B8%B2%E6%9F%93%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <id>https://csjiabin.github.io/2018/09/16/Mathjax与KaTex渲染数学公式/</id>
    <published>2018-09-16T12:39:09.000Z</published>
    <updated>2018-10-18T08:54:10.011Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常会用 Office Word 在文档中插入数学公式，有没有想过，如何在你的网页上渲染数学公式呢？让我们走进数学，欣赏一下公式渲染的美妙之处。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>我们先来看看都有哪些场景应用到了数学公式，有个整体的印象。此外，可以扩展技术面，让你可以在做技术选型的时候游刃有余：</p><p><strong>大数据分析</strong><br>当你要做一些大数据分析的时候，可能会用到很多的算法公式。如何让读者更好的理解内容，你可能需要用到公式渲染。</p><p><strong>在线教育的数学试卷渲染</strong><br>毋庸置疑，数学包含了很多公式，很难想象一张试卷没有包含任何数学公式。</p><p><strong>富文本编辑器</strong><br>这个可能是最多的场景，甚至你一直在用，却未曾感知。例如：Word 中插入公式，CKeditor 中的公式组件。</p><p><strong>学术论文</strong><br>如果你是一个严谨的学者，肯定不会在自己论文中粘贴图片的公式，你可能需要用到公式渲染。</p><p><strong>印刷出版</strong><br>刊物印刷出版，数学公式必不可少，没有人可以忍受印在书上的图片公式。因为它可能会失真。</p><h3 id="多种选择"><a href="#多种选择" class="headerlink" title="多种选择"></a>多种选择</h3><p>这里主要介绍两个<code>JS</code>数学公式渲染的类库：</p><ol><li><a href="https://www.mathjax.org/" target="_blank" rel="noopener">Mathjax</a>: A JavaScript display engine for mathematics that works in all browsers. No more setup for readers. It just works.</li><li><a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener">KaTex</a>: The fastest math typesetting library for the web.</li></ol><h4 id="Mathjax-示例"><a href="#Mathjax-示例" class="headerlink" title="Mathjax 示例"></a>Mathjax 示例</h4><p>先来看看 <code>Mathjax</code> 的例子，使用方式非常简单，我们引入类库文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML'</span> <span class="attr">async</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个简单的例子可能如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Jartto's MathJax Demo <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">"https://example.com/mathjax/MathJax.js?config=AM_CHTML"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>When `a != 0`, there are two solutions to `ax^2 + bx + c = 0` and</span><br><span class="line">they are<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">  `x = (-b +- sqrt(b^2-4ac))/(2a) .`</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">When $a \ne 0$, there are two solutions to \(ax^2 + bx + c = 0\) and they are</span><br><span class="line">$$x = &#123;-b \pm \sqrt&#123;b^2-4ac&#125; \over 2a&#125;.$$</span><br></pre></td></tr></table></figure><p>渲染后的结果如下：<br>When $a \ne 0$, there are two solutions to (ax^2 + bx + c = 0) and they are<br>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$<br>我们可以把表达式放到引号里，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`ax^2 + bx + c = 0`</span><br></pre></td></tr></table></figure><p>或者 <code>$</code> 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ax^2 + bx + c = 0$</span><br></pre></td></tr></table></figure><p>使用很简单，详情可以看看<a href="https://docs.mathjax.org/en/latest/mathjax.html" target="_blank" rel="noopener">文档</a>。</p><h4 id="KaTex-示例"><a href="#KaTex-示例" class="headerlink" title="KaTex 示例"></a>KaTex 示例</h4><p>看完 <code>Mathjax</code> 之后，我们再来了解一下 <code>KaTex</code>:</p><p><strong>1.安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> npm</span><br><span class="line">npm install katex</span><br><span class="line">npm install -g katex</span><br><span class="line"><span class="meta">#</span> yarn</span><br><span class="line">yarn add katex</span><br><span class="line">yarn global add katex</span><br><span class="line"><span class="meta">#</span> Browser</span><br><span class="line">&lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.css" integrity="sha384-JwmmMju6Z7M9jiY4RXeJLoNb3aown2QCC/cI7JPgmOLsn3n33pdwAj0Ml/CMMd1W" crossorigin="anonymous"&gt;</span><br><span class="line">&lt;script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.js" integrity="sha384-atIluo+2Hixq8HCazSQWa1JjeC5L0CQeWAx74Q+EbqgAW4UixbrBQF4+1jvBX01b" crossorigin="anonymous"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>KaTex 支持大部分的浏览器：Chrome, Safari, Firefox, Opera, Edge, and IE 9–11</p></blockquote><p><strong>2.使用 Dom 渲染 TeX 表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">katex.render(<span class="string">"c = \\pm\\sqrt&#123;a^2 + b^2&#125;"</span>, element, &#123;</span><br><span class="line">  throwOnError: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>3.反斜线需要特殊处理</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">katex.render(<span class="built_in">String</span>.raw<span class="string">`c = \pm\sqrt&#123;a^2 + b^2&#125;`</span>, element, &#123;</span><br><span class="line">  throwOnError: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>4.服务端渲染</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> html = katex.renderToString(<span class="string">"c = \\pm\\sqrt&#123;a^2 + b^2&#125;"</span>, &#123;</span><br><span class="line">  throwOnError: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// '&lt;span class="katex"&gt;...&lt;/span&gt;'</span></span><br></pre></td></tr></table></figure><p><strong>5.处理自动渲染</strong></p><ul><li>首先加载 js 和 css</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-D+9gmBxUQogRLqvARvNLmA9hS2x//eK1FhVb9PiU86gmcrBrJAQT8okdJ4LMp2uv"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/katex.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-483A6DwYfKeDa0Q52fJmxFXkcPCFfnXMoXblOkJ4JcA8zATN6Tm78UNL72AKk+0O"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure><ul><li>额外引入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/katex@0.10.0-rc.1/dist/contrib/auto-render.min.js"</span> <span class="attr">integrity</span>=<span class="string">"sha384-yACMu8JWxKzSp/C1YV86pzGiQ/l1YUfE8oPuahJQxzehAjEt2GiQuy/BIvl9KyeF"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span></span><br></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        renderMathInElement(<span class="built_in">document</span>.body, &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// jartto's demo</span></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当然，我们也可以这么使用：window.renderMathInElement(elem, options);</p></blockquote><p><strong>6.可用参数</strong></p><blockquote><p>KaTex 能支持很多的场景，缘于它可以灵活的配置。</p></blockquote><ul><li>displayMode</li><li>throwOnError</li><li>errorColor</li><li>macros</li><li>colorIsTextColor</li><li>maxSize</li><li>maxExpand</li><li>allowedProtocols</li><li>strict</li></ul><p>参数定义可以看<a href="https://katex.org/docs/options.html" target="_blank" rel="noopener">这里</a>，我们可以根据场景来配置参数。那么如何使用呢，一个简单的例如可能如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">katex.render(<span class="string">"c = \\pm\\sqrt&#123;a^2 + b^2&#125;\\in\\RR"</span>, element, &#123;</span><br><span class="line">  displayMode: <span class="literal">true</span>,</span><br><span class="line">  macros: &#123;</span><br><span class="line">    <span class="string">"\\RR"</span>: <span class="string">"\\mathbb&#123;R&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>7.异常处理</strong></p><blockquote><p>公式排版很细致，但是疏漏不可避免，这时候你可能需要了解一下公式的异常处理。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> html = katex.renderToString(texString);</span><br><span class="line">  <span class="comment">// '&lt;span class="katex"&gt;...&lt;/span&gt;'</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (e <span class="keyword">instanceof</span> katex.ParseError) &#123;</span><br><span class="line">    <span class="comment">// KaTeX can't parse the expression</span></span><br><span class="line">    html = (<span class="string">"Error in LaTeX '"</span> + texString + <span class="string">"': "</span> + e.message)</span><br><span class="line">      .replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>)</span><br><span class="line">      .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">      .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> e; <span class="comment">// other error</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8.在线尝试</strong></p><p>公式排版不是一件容易的事，为了达到更好的渲染效果，调试必不可少。还好，KaTex 为我们提供了<a href="https://katex.org/#demo" target="_blank" rel="noopener">在线调试</a>工具</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><ul><li><code>Mathjax</code> 有着更全面的解析，但却丧失了体积轻量这一优势；</li><li><code>KaTex</code> 则更加灵活，以高速渲染为优势；</li></ul><blockquote><p>所以，按照使用场景选择合适的类库吧。</p></blockquote><h3 id="万变不离其宗"><a href="#万变不离其宗" class="headerlink" title="万变不离其宗"></a>万变不离其宗</h3><p>不管是 <code>Mathjax</code> 还是 <code>KaTex</code> 其实都依赖了底层协议，也就是我们常说的 <code>TEX</code>。<br><a href="https://zh.wikipedia.org/wiki/TeX" target="_blank" rel="noopener">TEX</a>（希腊语：/tɛx/[1]，音译“泰赫”，文本模式下写作 TeX ），是一个由美国计算机教授高德纳（Donald Ervin Knuth）编写的功能强大的排版软件。它在学术界十分流行，特别是数学、物理学和计算机科学界。</p><blockquote><p><code>TEX</code> 被普遍认为是一个优秀的排版工具，特别是在处理复杂的数学公式时。<br>利用诸如是 <code>LATEX</code> 等终端软件，<code>TEX</code> 就能够排版出精美的文本以帮助人们辨认和查找。<code>LATEX</code> 是一套以 <code>TEX</code> 描述的宏软件。<code>LATEX</code> 有很多预设的模版、样式。它比 <code>TEX</code> 更为结构化，如包含了供创建索引、表格、列表等的宏和公用软件。</p></blockquote><h3 id="掌握语法"><a href="#掌握语法" class="headerlink" title="掌握语法"></a>掌握语法</h3><p>既然大家都遵守 <code>TEX</code> 协议，那么就好办了。我们只要掌握底层语法，不管多少个类库都只是包了一层语法糖。那么我们就从语法开始吧，这里我稍作整理，大概如下：</p><p><strong>1.换行 <code>\\</code></strong><br><strong>2.求和</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\displaystyle\sum_0^n</span><br></pre></td></tr></table></figure><p><strong>3.比较</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a \gt b</span><br></pre></td></tr></table></figure><p><strong>4.分数</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;2&#125;&#123;9&#125;</span><br></pre></td></tr></table></figure><p><strong>5.圆弧</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\overgroup&#123;AC&#125;</span><br></pre></td></tr></table></figure><p><strong>6.表格</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;array&#125;&#123;|c|c|c|c|c|c|&#125;\hline年龄\left(岁\right)&amp;12&amp;13&amp;14&amp;15&amp;16\\\hline人数&amp;1&amp;4&amp;3&amp;7&amp;5\\\hline\end&#123;array&#125;</span><br></pre></td></tr></table></figure><p><strong>7.矩阵</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">   a &amp; b \\</span><br><span class="line">   c &amp; d</span><br><span class="line">\end&#123;matrix&#125;</span><br></pre></td></tr></table></figure><p><strong>8.条件判断</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;cases&#125;</span><br><span class="line">   a &amp;\text&#123;if &#125; b \\</span><br><span class="line">   c &amp;\text&#123;if &#125; d</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure><p>如果感兴趣，可以看这里的<a href="https://katex.org/docs/support_table.html" target="_blank" rel="noopener">文档</a>。</p><h3 id="实用技巧"><a href="#实用技巧" class="headerlink" title="实用技巧"></a>实用技巧</h3><p><strong>1.公式太长，如何换行?</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\frac&#123;a^&#123;2&#125;-1&#125;&#123;a&#125;÷\frac&#123;(a-1)^&#123;2&#125;&#125;&#123;a&#125;=\frac&#123;(a+1)(a-1)&#125;&#123;a&#125;×\frac&#123;a&#125;&#123;(a-1)^&#123;2&#125;&#125;=\frac&#123;a+1&#125;&#123;a-1&#125;</span><br></pre></td></tr></table></figure><p>像这样的公式，渲染出来会特别长，甚至超出了屏幕边界，大大影响用户体验。</p><p>那我们改一下，使用折行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;alignedat&#125;&#123;2&#125;</span><br><span class="line">   \frac&#123;a^&#123;2&#125;-1&#125;&#123;a&#125;÷\frac&#123;(a-1)^&#123;2&#125;&#125;&#123;a&#125;= \\</span><br><span class="line">   \frac&#123;(a+1)(a-1)&#125;&#123;a&#125;×\frac&#123;a&#125;&#123;(a-1)^&#123;2&#125;&#125;=\frac&#123;a+1&#125;&#123;a-1&#125;</span><br><span class="line">\end&#123;alignedat&#125;</span><br></pre></td></tr></table></figure><p>这样就完美了～</p><p><strong>2.一定要使用异常捕获</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> katex.renderToString(jarttoLatex, &#123; <span class="attr">displayMode</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// TODO log error latex</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"katex error"</span>, e);</span><br><span class="line">  <span class="keyword">return</span> jarttoLatex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>公式语法还是比较复杂，稍有不慎很容易出错，所以一定要 <code>try catch</code>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们经常会用 Office Word 在文档中插入数学公式，有没有想过，如何在你的网页上渲染数学公式呢？让我们走进数学，欣赏一下公式渲染的美妙之处。&lt;/p&gt;
&lt;h3 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://csjiabin.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://csjiabin.github.io/tags/js/"/>
    
      <category term="Mathjax" scheme="https://csjiabin.github.io/tags/Mathjax/"/>
    
      <category term="KaTex" scheme="https://csjiabin.github.io/tags/KaTex/"/>
    
      <category term="TEX" scheme="https://csjiabin.github.io/tags/TEX/"/>
    
  </entry>
  
  <entry>
    <title>使用vue-worker轻松使用Vue.js</title>
    <link href="https://csjiabin.github.io/2018/09/05/%E4%BD%BF%E7%94%A8vue-worker%E8%BD%BB%E6%9D%BE%E4%BD%BF%E7%94%A8VueJs/"/>
    <id>https://csjiabin.github.io/2018/09/05/使用vue-worker轻松使用VueJs/</id>
    <published>2018-09-05T07:56:03.000Z</published>
    <updated>2018-09-17T02:08:37.983Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>像许多开发人员一样，当Web Workers首次出现在Web开发环境中时，我非常热情，并且对我可以用它们完成的各种惊人事情感到厌烦。然而，当我意识到工作人员必须从托管在Web服务器上的单独文件加载时，我的热情很快就受到了打击。这似乎是一个巨大的痛苦，不值得努力。结合API开销，自从我第一次尝试到现在为止，我还没有真正再次使用过工作者。看着<code>vue-worker</code>，我突然惊讶于我的Vue.js应用程序可以通过一个简单的API和没有外部文件来完成什么。</p></blockquote><p><a href="https://github.com/israelss/vue-worker" target="_blank" rel="noopener">vue-worker</a>（或者说是同一 <a href="https://github.com/israelss" target="_blank" rel="noopener">作者</a> 的 <a href="https://github.com/israelss/simple-web-worker" target="_blank" rel="noopener">simple-web-worker</a> ）的核心前提是Web Workers可以从Data URI初始化，它可以只是一个字符串化的函数。</p><p><code>vue-worker</code>通过一个简单易懂的API来解决其中涉及的复杂性，允许您像promises一样轻松执行多头函数。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>通过 <strong>Yarn</strong> 或 <strong>NPM</strong> 安装<code>vue-worker</code>：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Yarn</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn add vue-worker</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> NPM</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install vue-worker --save</span></span><br></pre></td></tr></table></figure></p><p>现在，启用<code>VueWorker</code>插件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueWorker <span class="keyword">from</span> <span class="string">'vue-worker'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'App.vue'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueWorker);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这使您的组件能够访问<code>this.$worker</code>。</p><h3 id="在Worker中运行函数"><a href="#在Worker中运行函数" class="headerlink" title="在Worker中运行函数"></a>在Worker中运行函数</h3><p>现在，您可以在组件内部使用<code>this.$worker.run(function, args[])</code>。</p><p>这运行一个输出 <strong>Hello，World</strong> 的函数！在组件安装时的工作线程中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  mounted() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.$worker.run(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;arg&#125;</span>!`</span></span></span><br><span class="line"><span class="javascript">    &#125;, [<span class="string">'World'</span>])</span></span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    .catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.error(e)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="可重复使用-Workers"><a href="#可重复使用-Workers" class="headerlink" title="可重复使用 Workers"></a>可重复使用 Workers</h3><p>您可以创建可重复使用的<code>worker</code> 代理 <code>this.$worker.create([{message, func}])</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      myWorker: <span class="literal">null</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  created() &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.myWorker = <span class="keyword">this</span>.$worker.create([</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">message</span>: <span class="string">'message1'</span>, <span class="attr">func</span>: <span class="function">(<span class="params">arg</span>) =&gt;</span> <span class="string">`Output 1 <span class="subst">$&#123;arg&#125;</span>`</span>&#125;,</span></span><br><span class="line"><span class="javascript">      &#123;<span class="attr">message</span>: <span class="string">'message2'</span>, <span class="attr">func</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'Output 2'</span>&#125;</span></span><br><span class="line"><span class="undefined">    ])</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.myWorker.postMessage(<span class="string">'message1'</span>, [<span class="string">'Boop!'</span>])</span></span><br><span class="line"><span class="javascript">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>你还可以做更多的事情，看看<code>vue-worker</code>和<code>simple-worker</code>文档。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;像许多开发人员一样，当Web Workers首次出现在Web开发环境中时，我非常热情，并且对我可以用它们完成的各种惊人事情感到厌烦。然而，当我意识到工作人员必须从托管在Web服务器上的单独文件加载时，我的热情很快就受到了打击。这似乎是一个巨大的痛苦
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://csjiabin.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://csjiabin.github.io/tags/js/"/>
    
      <category term="vue" scheme="https://csjiabin.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>HTML5与HTML4的区别</title>
    <link href="https://csjiabin.github.io/2018/09/01/HTML5%E4%B8%8EHTML4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://csjiabin.github.io/2018/09/01/HTML5与HTML4的区别/</id>
    <published>2018-09-01T13:28:14.000Z</published>
    <updated>2018-09-16T12:33:46.494Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML5-推出的理由"><a href="#HTML5-推出的理由" class="headerlink" title="HTML5 推出的理由"></a>HTML5 推出的理由</h3><p><strong>解决 Web 上存在的问题：</strong></p><p><strong>Web 浏览器间的兼容性低:</strong> 在一个浏览器中可以运行的 HTML、Css、Javascript，在另一个浏览器中不能运行。</p><p><strong>原因：</strong> 各浏览器规范不统一，没有被标准化。</p><p><strong>解决方案：</strong> 使各浏览器的功能符合通用标准。</p><p><strong>文档结构不够明确：</strong> HTML4 中元素不能把文档结构表示清楚。</p><p><strong>解决方案：</strong> 增加与结构相关的元素。</p><p><strong>Web 应用程序的功能受到限制：</strong> HTMLL4 对 Web 应用程序的贡献很小，比如：不允许同时上传多个文件。</p><p><strong>解决方案：</strong> 提供供 Web 应用程序使用的 API。</p><h3 id="HTML5-语法的改变"><a href="#HTML5-语法的改变" class="headerlink" title="HTML5 语法的改变"></a>HTML5 语法的改变</h3><p><strong>内容类型不变</strong><br>HTML5 的文件扩展符（html 或.htm）与内容类型（text/html）保持不变。<br><strong>DOCTYPE 声明变化</strong></p><p>HTML4 中需要指明是 HTML 的哪个版本，HTML5 不需要，只使用<code>&lt;!DOCTYPE html&gt;</code>即可。</p><p><strong>指定字符编码变化</strong></p><p>HTML4：<code>&lt;meta http-equiv=‶content-type″ content=‶text/html; charset=UTF-8″&gt;</code></p><p>HTML5:<code>&lt;meta charset=‶UTF-8″&gt;</code></p><p><strong>可以省略元素的标记</strong></p><p>HTML5 中很多元素标记可以省略</p><p><strong>具有 boolean 值的属性调整</strong></p><p>不指定属性值、属性名设定为属性值、字符串设为空时表示属性值为 true；</p><p>不写该属性表示属性值为 false。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">‶checkbox″</span> <span class="attr">checked</span>&gt;</span>                    <span class="comment">&lt;!--表示checked值为true--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">‶checkbox″</span> <span class="attr">checked</span>=<span class="string">‶checked″</span>&gt;</span>          <span class="comment">&lt;!-- 表示checked值为true --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">‶checkbox″</span> <span class="attr">checked</span>=<span class="string">‶″</span>&gt;</span>                 <span class="comment">&lt;!-- 表示checked值为true --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">‶checkbox″</span>&gt;</span>                            <span class="comment">&lt;!-- 表示checked值为false --&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可省略引号</strong></p><p>HTML5 可省略指定属性值时的引号。</p><h3 id="新增的元素和废除的元素"><a href="#新增的元素和废除的元素" class="headerlink" title="新增的元素和废除的元素"></a>新增的元素和废除的元素</h3><p><strong>新增元素</strong></p><p><strong>新增的结构元素</strong></p><p><strong>section：</strong> 表示页面中内容块，比如章节、页眉、页脚或页面中的其他部分，可与<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>结合使用表示文档结构。</p><p><strong>article：</strong> 表示页面中一块与上下文不相关的独立内容，比如博客中的一篇文章或报纸中的一篇文章。</p><p><strong>aside：</strong> 表示 article 内容之外，与 article 内容相关的辅助信息。</p><p><strong>header：</strong> 表示页面中的区域块，通常用它表示标题。</p><p><strong>hgroup：</strong> 用于对整个页面或页面中标题进行整合。</p><p><strong>footer：</strong> 表示页面中的区域块，通常表示区域快的脚部或底部，用于承载作者姓名、创作日期等与作者的元素。</p><p><strong>nav:</strong> 表示页面中导航部分。</p><p><strong>figure：</strong>表示一段独立的流内容，一般表示主体流内容的一个独立单元。</p><p><strong>新增的其他元素</strong></p><p><strong>video：</strong> 定义电影片段、视频流等视频。</p><p><strong>audio：</strong> 定义音乐或音频流。</p><p><strong>canvas：</strong> 画布，本身没有行为，仅提供一块画布，但它的 API 展现给 JavaScript 及脚本，能够把想绘制的东西绘制在 canvas 上。</p><p><strong>embed mark progress meter time ruby rt rp wbr command details detalist</strong><br><strong>datagrid keygen output source menu</strong></p><p><strong>新增的 input 元素的类型</strong></p><p><strong>email：</strong> 表示必须输的 email 地址</p><p><strong>url：</strong> 表示文本框输入的一个地址</p><p><strong>number：</strong> 表示数字</p><p><strong>range：</strong> 表示数字范围值</p><p><strong>DataPickers：</strong>表示日历的日期、时间</p><p><strong>废除的元素</strong></p><p><strong>能使用 css 代替的元素</strong></p><p>basefont big center font s tt u 等</p><p><strong>不再使用 frame 框架</strong></p><p>由于 <code>frame</code> 框架对网页可用性存在负面影响，<strong>HTML5</strong> 中已不支持 <code>frame</code> 框架，只支持 <code>iframe</code> 框架或者用服务器方式创建的由多个页面组成的复合页面的形式，同时将 <code>frameset</code> 元素、<code>frame</code> 元素、<code>noframes</code> 元素废除。</p><p><strong>只有部分浏览器支持的元素</strong></p><p><strong>其他被废除的元素</strong></p><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><p>HTML5中新增全局属性的概念，全局属性指可以对任何元素都使用的属性。</p><p><strong>contentEditable属性</strong></p><p>允许用户编辑元素中内容，使用该属性的元素必须为可以获得鼠标焦点的元素，而且在点击鼠标后向用户提供一个插入符号，提示用户该元素允许进行编辑。</p><p>是boolean值类型，可以设为true、false或继承状态。其中，true代表可编辑，false代表不可编辑，当未指定true或false时与父元素的继承状态相同。</p><p><strong>designMode属性</strong></p><p>用来指定整个页面是否可编辑，当页面可编辑时，页面中所有支持contentEditable属性的元素都变为可编辑状况。designMode属性只能在JavaScript脚本中被修改、编辑。属性值可取on（可编辑）或off（不可编辑）。</p><p><strong>hidden属性</strong></p><p>HTML5中所有元素都允许使用hidden属性，该属性类似于input元素中hidden元素，boolean值，可设为true（不可见）、false（可见）。当某元素的hidden属性值为true时，浏览器不渲染该元素，使该元素处于不可见状态，但浏览器创建该元素内容，即页面加载后允许使用JavaScript脚本将该属性值取消，使该元素可见。</p><p><strong>spellcheck属性</strong></p><p>针对input（type=text）与textarea这两个文本输入框提供的一个新属性，主要对用户输入内容进行拼写与语法检查。属性值为boolean值，可取true或false。</p><p><strong>tableindex属性</strong></p><p>当点击Tab键时，让窗口或页面中可获得焦点的链接元素或表单元素进行遍历，tableindex表示该元素第几个被访问到。</p><p>若tableindex值为”-1”时表示无法获取该元素.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;HTML5-推出的理由&quot;&gt;&lt;a href=&quot;#HTML5-推出的理由&quot; class=&quot;headerlink&quot; title=&quot;HTML5 推出的理由&quot;&gt;&lt;/a&gt;HTML5 推出的理由&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;解决 Web 上存在的问题：&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
      <category term="html" scheme="https://csjiabin.github.io/categories/html/"/>
    
    
      <category term="html4" scheme="https://csjiabin.github.io/tags/html4/"/>
    
      <category term="html5" scheme="https://csjiabin.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>Markdown使用指南</title>
    <link href="https://csjiabin.github.io/2018/08/26/Markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://csjiabin.github.io/2018/08/26/Markdown使用指南/</id>
    <published>2018-08-26T05:37:29.000Z</published>
    <updated>2018-10-18T14:42:56.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是 Markdown？Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。<br>非技术类笔记用户，千万不要被「标记」、「语言」吓到，Markdown 的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。<br>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到「心中无尘，码字入神」的境界。</p><h2 id="利用-Markdown-可以做什么？"><a href="#利用-Markdown-可以做什么？" class="headerlink" title="利用 Markdown 可以做什么？"></a>利用 Markdown 可以做什么？</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题是每篇文章必备而且最常用的格式。<br>在 Markdown 中，如果想将一段文字定义为标题，只需要在这段文字前面加上 #，再在 # 后加一个空格即可。还可增加二、三、四、五、六级标题，总共六级，只需要增加 # ，增加一个 # ，标题字号相应降低一级。<br>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><p><img src="/uploads/post/WX20180826-152410@2x.png" alt="效果"></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表格式也很常用，它可以让你的文稿变得井井有条。在 Markdown 中，你只需要在文字前面加上 - 就可以了；如果你希望是有序列表，在文字前面加上 1. 2. 3. 即可。</p><blockquote><p>注：-、1.和文字之间要保留一个字符的空格。</p></blockquote><p><strong>无序列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码</span></span><br><span class="line">- 列表 <span class="number">1</span></span><br><span class="line">  - 列表 <span class="number">1.1</span></span><br><span class="line">  - 列表 <span class="number">1.2</span></span><br><span class="line">- 列表 <span class="number">2</span></span><br><span class="line">- 列表 <span class="number">3</span></span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><ul><li>列表 1<ul><li>列表 1.1</li><li>列表 1.2</li></ul></li><li>列表 2</li><li>列表 3</li></ul><blockquote><p>无序列表可以用* ， + ， — 来创建，用在线编辑器看，实际上是转换成了 ul&gt;li ，所以使用哪个都可以。</p></blockquote><hr><p><strong>有序列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码</span></span><br><span class="line"><span class="number">1.</span> 列表 <span class="number">1</span></span><br><span class="line"><span class="number">2.</span> 列表 <span class="number">2</span></span><br><span class="line"><span class="number">3.</span> 列表 <span class="number">3</span></span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><br>1. 列表 1<br>2. 列表 2<br>3. 列表 3<br><br>### 引用<br><br>如果你需要在文稿中引用一段别处的句子，那么就要用到「引用」格式。<br><br>在引用文字前加上 <code>&gt;</code> 并与文字保留一个字符的空格，即可。代码如下：<br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; - 前方高能</span><br><span class="line">&gt; &gt; 注意：这里是为了提醒前面有很刺激的事情发生，请做好准备。</span><br><span class="line">&gt; &gt; 城市套路深，我要回农村。</span><br></pre></td></tr></table></figure><br><br><div style="text-align:center;color:gray;">效果如下：</div><blockquote><ul><li>前方高能<blockquote><p> 注意：这里是为了提醒前面有很刺激的事情发生，请做好准备。<br>城市套路深，我要回农村。</p></blockquote></li></ul></blockquote><blockquote><p>注：符号与文本之间必须空格。</p></blockquote><p>由上面例子可以看出，想要在上一次引用中嵌套一层引用，只需多加一个&gt;，理论上可以无限嵌套，我就不整那么多了，注意：多层嵌套的<code>&gt;</code>是不需要连续在一起的，只要在一行就可以了，中间允许有空格，但是为了好看，还是把排版搞好吧。</p><h3 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h3><p>这个就比较重要了，很多时候都需要展示出一些代码<br>如果代码量比较少，只有单行的话，可以用单反引号包起来，如下：<br><strong>单行用</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>气宇轩昂<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>`</span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><p><code>&lt;p&gt;&lt;a href=&quot;javascript:;&quot;&gt;气宇轩昂&lt;/a&gt;&lt;/p&gt;</code></p><p>要是多行这个就不行了，多行可以用这个：<br><img src="/uploads/post/WX20180826-181515@2x.png" alt=""></p><div style="text-align:center;color:gray;">效果如下：</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>这是title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多行用三个反引号，如果要写注释，可以在反引号后面写</p><h3 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h3><p>链接：在 Markdown 中，插入链接只需要使用 <code>[显示文本](链接地址)</code> 即可。</p><p>图片：在 Markdown 中，插入图片只需要使用 <code>![显示文本](图片链接地址)</code>即可。</p><blockquote><p>注：插入图片的语法和链接的语法很像，只是前面多了一个 <code>!</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**插入链接：**</span><br><span class="line">[气宇轩昂](http://example.com/)</span><br><span class="line"></span><br><span class="line">**插入图片：**</span><br><span class="line">![这是一张图](/uploads/post/home-bg-o.jpg)</span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><p><strong>插入链接：</strong><br><a href="http://example.com/" target="_blank" rel="noopener">气宇轩昂</a></p><p><strong>插入图片：</strong><br><img src="/uploads/post/home-bg-o.jpg" alt="这是一张图"></p><p>上述方法只是单纯把图片显示出来，无法自定义设置图片大小，如果图片很大的话就会铺满屏幕或者超高，排版上不好看。</p><p><strong>通过 <code>img</code> 标签控制宽高:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://pic15.photophoto.cn/20100615/0006019058815826_b.jpg"</span>  <span class="attr">height</span>=<span class="string">"330"</span> <span class="attr">width</span>=<span class="string">"400"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/post/home-bg-o.jpg"</span> <span class="attr">style</span>=<span class="string">"height:200px;width:400px"</span>&gt;</span></span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><br><img src="/uploads/post/home-bg-o.jpg" style="height:200px;width:400px;"><br><br><strong>通过 <code>&lt;div&gt;</code> 标签和 <code>align</code> 属性控制对齐方式:</strong><br><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:flex;justify-content:center;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/post/home-bg-o.jpg"</span> <span class="attr">style</span>=<span class="string">"width:300px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/uploads/post/home-bg.jpg"</span> <span class="attr">style</span>=<span class="string">"width:300px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><div style="text-align:center;color:gray;">效果如下：</div><br><div class="img-content" style="display:flex;justify-content:center;"><br>  <img src="/uploads/post/home-bg-o.jpg" style="width:350px;height:200px;display:inline-block !important;margin:0;"><img src="/uploads/post/home-bg.jpg" style="width:350px;height:200px;display:inline-block !important;margin:0 20px;"><br></div><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>当你需要在 Markdown 文稿中键入表格，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 第一种写法</span><br><span class="line">| name | age | sex |</span><br><span class="line">| :--: | :-- | --: |</span><br><span class="line">| tony | 18  | 男  |</span><br><span class="line"></span><br><span class="line"># 第二种写法</span><br><span class="line">表头1 | 表头2</span><br><span class="line">---- | ----</span><br><span class="line">Cell | Cell</span><br><span class="line">|</span><br><span class="line"># 第三种写法</span><br><span class="line"></span><br><span class="line">学号|姓名|分数</span><br><span class="line">-|-|-</span><br><span class="line">001|小明|90</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">name</th><th style="text-align:left">age</th><th style="text-align:right">sex</th></tr></thead><tbody><tr><td style="text-align:center">tony</td><td style="text-align:left">18</td><td style="text-align:right">男</td></tr></tbody></table><table><thead><tr><th>表头 1</th><th>表头 2</th></tr></thead><tbody><tr><td>Cell</td><td>Cell</td></tr></tbody></table><table><thead><tr><th>学号</th><th>姓名</th><th>分数</th></tr></thead><tbody><tr><td>001</td><td>小明</td><td>90</td></tr></tbody></table><p>从这 3 种不同写法看，表格的格式不一定要对的非常齐，但是为了好看，对齐肯定是最好的，第一种的分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中，还是有点意思的。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*字体倾斜*</span><br><span class="line">_字体倾斜_</span><br><span class="line">**字体加粗**</span><br><span class="line">__字体加粗__</span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><p><em>字体倾斜</em><br><em>字体倾斜</em><br><strong>字体加粗</strong><br><strong>字体加粗</strong></p><p>一个星号或者是一个下划线包起来，会转换为<code>&lt;em&gt;</code>倾斜，如果是 2 个，会转换为<code>&lt;strong&gt;</code>加粗。</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* \\</span><br><span class="line">* \`</span><br><span class="line">* \~</span><br><span class="line">* \_</span><br><span class="line">* \-</span><br><span class="line">* \+</span><br><span class="line">* \.</span><br><span class="line">* \!</span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><ul><li>\</li><li>`</li><li>~</li><li>_</li><li>-</li><li>+</li><li>.</li><li>!</li></ul><p>就不一一列举了，基本上跟 js 转义是一样的</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~请删掉我吧~~</span><br></pre></td></tr></table></figure><div style="text-align:center;color:gray;">效果如下：</div><p><del>请删掉我吧</del></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线的语法只需要另起一行，分割线可以由* - _（星号，减号，底线）这 3 个符号的至少 3 个符号表示，注意至少要 3 个，且不需要连续，有空格也可以。代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这是第一段内容</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">这是第二段内容</span><br></pre></td></tr></table></figure><p><div style="text-align:center;color:gray;">效果如下：</div><br>这是第一段内容</p><hr><p>这是第二段内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;什么是 Markdown？Markdown 是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub
      
    
    </summary>
    
      <category term="other" scheme="https://csjiabin.github.io/categories/other/"/>
    
    
      <category term="Markdown" scheme="https://csjiabin.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript有用的代码片段和trick</title>
    <link href="https://csjiabin.github.io/2018/08/22/JavaScript%E6%9C%89%E7%94%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E5%92%8Ctrick/"/>
    <id>https://csjiabin.github.io/2018/08/22/JavaScript有用的代码片段和trick/</id>
    <published>2018-08-22T13:51:29.000Z</published>
    <updated>2018-09-17T02:08:02.888Z</updated>
    
    <content type="html"><![CDATA[<h4 id="浮点数取整"><a href="#浮点数取整" class="headerlink" title="浮点数取整"></a>浮点数取整</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">123.4545</span>;</span><br><span class="line">x &gt;&gt; <span class="number">0</span>; <span class="comment">// 123</span></span><br><span class="line">~~x; <span class="comment">// 123</span></span><br><span class="line">x | <span class="number">0</span>; <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">Math</span>.floor(x); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：前三种方法只适用于32个位整数，对于负数的处理上和 Math.floor是不同的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor(<span class="number">-12.53</span>); <span class="comment">// -13</span></span><br><span class="line"><span class="number">-12.53</span> | <span class="number">0</span>; <span class="comment">// -12</span></span><br></pre></td></tr></table></figure><h4 id="生成6位数字验证码"><a href="#生成6位数字验证码" class="headerlink" title="生成6位数字验证码"></a>生成6位数字验证码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">(<span class="string">'000000'</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() *  <span class="number">999999</span>)).slice(<span class="number">-6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="built_in">Math</span>.random().toString().slice(<span class="number">-6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="built_in">Math</span>.random().toFixed(<span class="number">6</span>).slice(<span class="number">-6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四</span></span><br><span class="line"><span class="string">''</span> + <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">999999</span>);</span><br></pre></td></tr></table></figure><h4 id="16进制颜色代码生成"><a href="#16进制颜色代码生成" class="headerlink" title="16进制颜色代码生成"></a>16进制颜色代码生成</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'#'</span>+(<span class="string">'00000'</span>+</span><br><span class="line">    (<span class="built_in">Math</span>.random()*<span class="number">0x1000000</span>&lt;&lt;<span class="number">0</span>).toString(<span class="number">16</span>)).slice(<span class="number">-6</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h4 id="驼峰命名转下划线"><a href="#驼峰命名转下划线" class="headerlink" title="驼峰命名转下划线"></a>驼峰命名转下划线</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'componentMapModelRegistry'</span>.match(<span class="regexp">/^[a-z][a-z0-9]+|[A-Z][a-z0-9]*/g</span>).join(<span class="string">'_'</span>).toLowerCase(); <span class="comment">// component_map_model_registry</span></span><br></pre></td></tr></table></figure><h4 id="url查询参数转json格式"><a href="#url查询参数转json格式" class="headerlink" title="url查询参数转json格式"></a>url查询参数转json格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> query = <span class="function">(<span class="params">search = <span class="string">''</span></span>) =&gt;</span> (<span class="function">(<span class="params">querystring = <span class="string">''</span></span>) =&gt;</span> (<span class="function"><span class="params">q</span> =&gt;</span> (querystring.split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> (<span class="function"><span class="params">kv</span> =&gt;</span> kv[<span class="number">0</span>] &amp;&amp; (q[kv[<span class="number">0</span>]] = kv[<span class="number">1</span>]))(item.split(<span class="string">'='</span>))), q))(&#123;&#125;))(search.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应ES5实现</span></span><br><span class="line"><span class="keyword">var</span> query = <span class="function"><span class="keyword">function</span>(<span class="params">search</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (search === <span class="keyword">void</span> <span class="number">0</span>) &#123; search = <span class="string">''</span>; &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">querystring</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (querystring === <span class="keyword">void</span> <span class="number">0</span>) &#123; querystring = <span class="string">''</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">q</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (querystring.split(<span class="string">'&amp;'</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">kv</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> kv[<span class="number">0</span>] &amp;&amp; (q[kv[<span class="number">0</span>]] = kv[<span class="number">1</span>]);</span><br><span class="line">        &#125;)(item.split(<span class="string">'='</span>));</span><br><span class="line">      &#125;), q);</span><br><span class="line">    &#125;)(&#123;&#125;);</span><br><span class="line">  &#125;)(search.split(<span class="string">'?'</span>)[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">query(<span class="string">'?key1=value1&amp;key2=value2'</span>); <span class="comment">// es6.html:14 &#123;key1: "value1", key2: "value2"&#125;</span></span><br></pre></td></tr></table></figure><h4 id="获取URL参数"><a href="#获取URL参数" class="headerlink" title="获取URL参数"></a>获取URL参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span>+ key +<span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">  <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">  <span class="keyword">if</span>(!!r)&#123;</span><br><span class="line">      <span class="keyword">return</span>  <span class="built_in">unescape</span>(r[<span class="number">2</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="n维数组展开成一维数组"><a href="#n维数组展开成一维数组" class="headerlink" title="n维数组展开成一维数组"></a>n维数组展开成一维数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], [<span class="string">'4'</span>, <span class="number">5</span>, [<span class="string">'6'</span>,<span class="number">7</span>,[<span class="number">8</span>]]], [<span class="number">9</span>], <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// 限制：数组项不能出现`,`，同时数组项全部变成了字符数字</span></span><br><span class="line">foo.toString().split(<span class="string">','</span>); <span class="comment">// ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="comment">// 转换后数组项全部变成数字了</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">'['</span> + foo + <span class="string">']'</span>); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三，使用ES6展开操作符</span></span><br><span class="line"><span class="comment">// 写法太过麻烦，太过死板</span></span><br><span class="line">[<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>], ...[<span class="string">'4'</span>, <span class="number">5</span>, ...[<span class="string">'6'</span>,<span class="number">7</span>,...[<span class="number">8</span>]]], ...[<span class="number">9</span>], <span class="number">10</span>]; <span class="comment">// [1, 2, 3, "4", 5, "6", 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法四</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">`[<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(foo).replace(<span class="regexp">/\[|]/g</span>, <span class="string">''</span>)&#125;</span>]`</span>); <span class="comment">// [1, 2, 3, "4", 5, "6", 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法五</span></span><br><span class="line"><span class="keyword">const</span> flatten = <span class="function">(<span class="params">ary</span>) =&gt;</span> ary.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.concat(<span class="built_in">Array</span>.isArray(b) ? flatten(b) : b), []);</span><br><span class="line">flatten(foo); <span class="comment">// [1, 2, 3, "4", 5, "6", 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法六</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(a) ? [].concat(...a.map(flatten)) : a;</span><br><span class="line">&#125;</span><br><span class="line">flatten(foo); <span class="comment">// [1, 2, 3, "4", 5, "6", 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><blockquote><p>注：更多方法请参考《How to flatten nested array in JavaScript?》</p></blockquote><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format1</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> z = &#123;</span><br><span class="line">    y: x.getFullYear(),</span><br><span class="line">    M: x.getMonth() + <span class="number">1</span>,</span><br><span class="line">    d: x.getDate(),</span><br><span class="line">    h: x.getHours(),</span><br><span class="line">    m: x.getMinutes(),</span><br><span class="line">    s: x.getSeconds()</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> y.replace(<span class="regexp">/(y+|M+|d+|h+|m+|s+)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((v.length &gt; <span class="number">1</span> ? <span class="string">"0"</span> : <span class="string">""</span>) + <span class="built_in">eval</span>(<span class="string">'z.'</span> + v.slice(<span class="number">-1</span>))).slice(-(v.length &gt; <span class="number">2</span> ? v.length : <span class="number">2</span>))</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format1(<span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="string">'yy-M-d h:m:s'</span>); <span class="comment">// 17-10-14 22:14:41</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params">fmt</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份 </span></span><br><span class="line">    <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日 </span></span><br><span class="line">    <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时 </span></span><br><span class="line">    <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分 </span></span><br><span class="line">    <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒 </span></span><br><span class="line">    <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度 </span></span><br><span class="line">    <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒 </span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt))&#123;</span><br><span class="line">    fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt))&#123;</span><br><span class="line">      fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;     </span><br><span class="line">  <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yy-M-d h:m:s'</span>); <span class="comment">// 17-10-14 22:18:17</span></span><br></pre></td></tr></table></figure><h4 id="统计文字个数"><a href="#统计文字个数" class="headerlink" title="统计文字个数"></a>统计文字个数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wordCount</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pattern = <span class="regexp">/[a-zA-Z0-9_\u0392-\u03c9]+|[\u4E00-\u9FFF\u3400-\u4dbf\uf900-\ufaff\u3040-\u309f\uac00-\ud7af]+/g</span>;</span><br><span class="line">  <span class="keyword">var</span> m = data.match(pattern);</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span>( m === <span class="literal">null</span> ) <span class="keyword">return</span> count;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; m.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m[i].charCodeAt(<span class="number">0</span>) &gt;= <span class="number">0x4E00</span>) &#123;</span><br><span class="line">      count += m[i].length;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> text = <span class="string">'贷款买房，也意味着你能给自己的资产加杠杆，能够撬动更多的钱，来孳生更多的财务性收入。'</span>;</span><br><span class="line">wordCount(text); <span class="comment">// 38</span></span><br></pre></td></tr></table></figure><h4 id="特殊字符转义"><a href="#特殊字符转义" class="headerlink" title="特殊字符转义"></a>特殊字符转义</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">htmlspecialchars</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = str.toString().replace(<span class="regexp">/&amp;/g</span>, <span class="string">"&amp;amp;"</span>).replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>).replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot;'</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">htmlspecialchars(<span class="string">'&amp;jfkds&lt;&gt;'</span>); <span class="comment">// "&amp;amp;jfkds&amp;lt;&amp;gt;"</span></span><br></pre></td></tr></table></figure><h4 id="动态插入js"><a href="#动态插入js" class="headerlink" title="动态插入js"></a>动态插入js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">injectScript</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s, t;</span><br><span class="line">    s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    s.type = <span class="string">'text/javascript'</span>;</span><br><span class="line">    s.async = <span class="literal">true</span>;</span><br><span class="line">    s.src = src;</span><br><span class="line">    t = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>)[<span class="number">0</span>];</span><br><span class="line">    t.parentNode.insertBefore(s, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="格式化数量"><a href="#格式化数量" class="headerlink" title="格式化数量"></a>格式化数量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatNum</span> (<span class="params">num, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num == <span class="string">"number"</span>) &#123;</span><br><span class="line">    num = <span class="built_in">String</span>(num.toFixed(n || <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">var</span> re = <span class="regexp">/(-?\d+)(\d&#123;3&#125;)/</span>;</span><br><span class="line">    <span class="keyword">while</span> (re.test(num)) num = num.replace(re, <span class="string">"$1,$2"</span>);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">formatNum(<span class="number">2313123</span>, <span class="number">3</span>); <span class="comment">// "2,313,123.000"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="string">'2313123'</span>.replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">','</span>); <span class="comment">// "2,313,123"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatNum</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">''</span>).reverse().reduce(<span class="function">(<span class="params">prev, next, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((index % <span class="number">3</span>) ? next : (next + <span class="string">','</span>)) + prev</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">formatNum(<span class="string">'2313323'</span>); <span class="comment">// "2,313,323"</span></span><br></pre></td></tr></table></figure><h4 id="身份证验证"><a href="#身份证验证" class="headerlink" title="身份证验证"></a>身份证验证</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chechCHNCardId</span>(<span class="params">sNo</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.regExpTest(sNo, /^[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">17</span>&#125;[X0<span class="number">-9</span>]$/)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sNo = sNo.toString();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a, b, c;</span><br><span class="line">  a = <span class="built_in">parseInt</span>(sNo.substr(<span class="number">0</span>, <span class="number">1</span>)) * <span class="number">7</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">1</span>, <span class="number">1</span>)) * <span class="number">9</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">2</span>, <span class="number">1</span>)) * <span class="number">10</span>;</span><br><span class="line">  a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">3</span>, <span class="number">1</span>)) * <span class="number">5</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">4</span>, <span class="number">1</span>)) * <span class="number">8</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">5</span>, <span class="number">1</span>)) * <span class="number">4</span>;</span><br><span class="line">  a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">6</span>, <span class="number">1</span>)) * <span class="number">2</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">7</span>, <span class="number">1</span>)) * <span class="number">1</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">8</span>, <span class="number">1</span>)) * <span class="number">6</span>;</span><br><span class="line">  a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">9</span>, <span class="number">1</span>)) * <span class="number">3</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">10</span>, <span class="number">1</span>)) * <span class="number">7</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">11</span>, <span class="number">1</span>)) * <span class="number">9</span>;</span><br><span class="line">  a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">12</span>, <span class="number">1</span>)) * <span class="number">10</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">13</span>, <span class="number">1</span>)) * <span class="number">5</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">14</span>, <span class="number">1</span>)) * <span class="number">8</span>;</span><br><span class="line">  a = a + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">15</span>, <span class="number">1</span>)) * <span class="number">4</span> + <span class="built_in">parseInt</span>(sNo.substr(<span class="number">16</span>, <span class="number">1</span>)) * <span class="number">2</span>;</span><br><span class="line">  b = a % <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">2</span>) &#123;</span><br><span class="line">    c = sNo.substr(<span class="number">17</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    c = <span class="built_in">parseInt</span>(sNo.substr(<span class="number">17</span>, <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (b) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="string">"X"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">9</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">7</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">      <span class="keyword">if</span> (c != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试质数"><a href="#测试质数" class="headerlink" title="测试质数"></a>测试质数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(<span class="regexp">/^.?$|^(..+?)\1+$/</span>).test(<span class="string">'1'</span>.repeat(n))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计字符串中相同字符出现的次数"><a href="#统计字符串中相同字符出现的次数" class="headerlink" title="统计字符串中相同字符出现的次数"></a>统计字符串中相同字符出现的次数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="string">'abcdaabc'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> info = arr</span><br><span class="line">    .split(<span class="string">''</span>)</span><br><span class="line">    .reduce(<span class="function">(<span class="params">p, k</span>) =&gt;</span> (p[k]++ || (p[k] = <span class="number">1</span>), p), &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(info); <span class="comment">//&#123; a: 3, b: 2, c: 2, d: 1 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="使用void-0来解决undefined被污染问题"><a href="#使用void-0来解决undefined被污染问题" class="headerlink" title="使用void 0来解决undefined被污染问题"></a>使用<code>void 0</code>来解决<code>undefined</code>被污染问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span> = <span class="number">1</span>;</span><br><span class="line">!!<span class="literal">undefined</span>; <span class="comment">// true</span></span><br><span class="line">!!<span class="keyword">void</span>(<span class="number">0</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="单行写一个评级组件"><a href="#单行写一个评级组件" class="headerlink" title="单行写一个评级组件"></a>单行写一个评级组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"★★★★★☆☆☆☆☆"</span>.slice(<span class="number">5</span> - rate, <span class="number">10</span> - rate);</span><br></pre></td></tr></table></figure><h4 id="JavaScript-错误处理的方式的正确姿势"><a href="#JavaScript-错误处理的方式的正确姿势" class="headerlink" title="JavaScript 错误处理的方式的正确姿势"></a>JavaScript 错误处理的方式的正确姿势</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    something</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href =</span><br><span class="line">        <span class="string">"http://stackoverflow.com/search?q=[js]+"</span> +</span><br><span class="line">        e.message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名函数自执行写法"><a href="#匿名函数自执行写法" class="headerlink" title="匿名函数自执行写法"></a>匿名函数自执行写法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() );</span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; )();</span><br><span class="line">[ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;() ];</span><br><span class="line"></span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">- <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">void</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> ^ <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"><span class="number">1</span> &gt; <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br></pre></td></tr></table></figure><h4 id="两个整数交换数值"><a href="#两个整数交换数值" class="headerlink" title="两个整数交换数值"></a>两个整数交换数值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>, b = <span class="number">30</span>;</span><br><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// 30</span></span><br><span class="line">b; <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><h4 id="数字字符转数字"><a href="#数字字符转数字" class="headerlink" title="数字字符转数字"></a>数字字符转数字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'1'</span>;</span><br><span class="line">+a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="最短的代码实现数组去重"><a href="#最短的代码实现数组去重" class="headerlink" title="最短的代码实现数组去重"></a>最短的代码实现数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...new <span class="built_in">Set</span>([<span class="number">1</span>, <span class="string">"1"</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>])]; <span class="comment">// [1, "1", 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="用最短的代码实现一个长度为m-6-且值都n-8-的数组"><a href="#用最短的代码实现一个长度为m-6-且值都n-8-的数组" class="headerlink" title="用最短的代码实现一个长度为m(6)且值都n(8)的数组"></a>用最短的代码实现一个长度为m(6)且值都n(8)的数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>(<span class="number">6</span>).fill(<span class="number">8</span>); <span class="comment">// [8, 8, 8, 8, 8, 8]</span></span><br></pre></td></tr></table></figure><h4 id="将argruments对象转换成数组"><a href="#将argruments对象转换成数组" class="headerlink" title="将argruments对象转换成数组"></a>将argruments对象转换成数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6：</span></span><br><span class="line"><span class="keyword">var</span> argArray = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">var</span> argArray = [...arguments];</span><br></pre></td></tr></table></figure><h4 id="获取日期时间缀"><a href="#获取日期时间缀" class="headerlink" title="获取日期时间缀"></a>获取日期时间缀</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取指定时间的时间缀</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">(<span class="keyword">new</span> <span class="built_in">Date</span>).getTime();</span><br><span class="line"><span class="comment">// 获取当前的时间缀</span></span><br><span class="line"><span class="built_in">Date</span>.now();</span><br><span class="line"><span class="comment">// 日期显示转换为数字</span></span><br><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure><h4 id="使用-x-indexOf-39-y-39-来简化x-indexOf-39-y-39-gt"><a href="#使用-x-indexOf-39-y-39-来简化x-indexOf-39-y-39-gt" class="headerlink" title="使用~x.indexOf(&#39;y&#39;)来简化x.indexOf(&#39;y&#39;) &gt; -"></a>使用<code>~x.indexOf(&#39;y&#39;)</code>来简化<code>x.indexOf(&#39;y&#39;) &gt; -</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="keyword">if</span> (str.indexOf(<span class="string">'lo'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (~str.indexOf(<span class="string">'lo'</span>)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="parseInt-or-Number"><a href="#parseInt-or-Number" class="headerlink" title="parseInt() or Number()"></a><code>parseInt()</code> or <code>Number()</code></h4><p>两者的差别之处在于<strong>解析</strong>和<strong>转换</strong>两者之间的理解。</p><p>解析<strong>允许</strong>字符串中含有非数字字符，解析按从左到右的顺序，如果遇到非数字字符就停止。而转换<strong>不允许</strong>出现非数字字符，否者会失败并返回NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'520'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'520px'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(a); <span class="comment">// 520</span></span><br><span class="line"><span class="built_in">parseInt</span>(a); <span class="comment">// 520</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(b); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(b); <span class="comment">// 520</span></span><br></pre></td></tr></table></figure><p><code>parseInt</code>方法第二个参数用于指定转换的基数，ES5默认为10进制。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>, <span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>, <span class="number">8</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>, <span class="number">10</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'10'</span>, <span class="number">16</span>);  <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></p><p>对于网上<code>parseInt(0.0000008)</code>的结果为什么为8，原因在于0.0000008转换成字符为”8e-7”，然后根据<code>parseInt</code>的解析规则自然得到”8”这个结果。</p><h4 id="拼接操作，-x-or-String-x-？"><a href="#拼接操作，-x-or-String-x-？" class="headerlink" title="+拼接操作，+x or String(x)？"></a><code>+</code>拼接操作，<code>+x</code> or <code>String(x)</code>？</h4><p>+运算符可用于数字加法，同时也可以用于字符串拼接。如果+的其中一个操作符是字符串(或者通过 隐式强制转换可以得到字符串)，则执行字符串拼接；否者执行数字加法。</p><p>需要注意的时对于数组而言，不能通过<code>valueOf()</code>方法得到简单基本类型值，于是转而调用<code>toString()</code>方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>] + [<span class="number">3</span>, <span class="number">4</span>]; <span class="comment">// "1,23,4"</span></span><br></pre></td></tr></table></figure></p><p>对于对象同样会先调用<code>valueOf()</code>方法，然后通过<code>toString()</code>方法返回对象的字符串表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a + <span class="number">123</span>; <span class="comment">// "[object Object]123"</span></span><br></pre></td></tr></table></figure><p>对于<code>a + &quot;&quot;</code>隐式转换和<code>String(a)</code>显示转换有一个细微的差别：<code>a + &#39;&#39;</code>会对a调用<code>valueOf()</code>方法，而<code>String()</code>直接调用<code>toString()</code>方法。大多数情况下我们不会考虑这个问题，除非真遇到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a  = &#123;</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">42</span>; &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">4</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a + <span class="string">''</span>; <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">String</span>(a); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="判断对象的实例"><a href="#判断对象的实例" class="headerlink" title="判断对象的实例"></a>判断对象的实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一: ES3</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二: ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span> <span class="keyword">instanceof</span> Person ? <span class="keyword">this</span> : <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">  self.name = name;</span><br><span class="line">  self.age = age;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三：ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">new</span>.target) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'Peron must called with new'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据安全类型检查"><a href="#数据安全类型检查" class="headerlink" title="数据安全类型检查"></a>数据安全类型检查</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value).slice(<span class="number">8</span>, <span class="number">-1</span>) === <span class="string">'Object'</span><span class="string">';</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 数组</span></span><br><span class="line"><span class="string">function isArray(value) &#123;</span></span><br><span class="line"><span class="string">  return Object.prototype.toString.call(value).slice(8, -1) === '</span><span class="built_in">Array</span><span class="string">';</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 函数</span></span><br><span class="line"><span class="string">function isFunction(value) &#123;</span></span><br><span class="line"><span class="string">  return Object.prototype.toString.call(value).slice(8, -1) === '</span><span class="built_in">Function</span><span class="string">';</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="让数字的字面值看起来像对象"><a href="#让数字的字面值看起来像对象" class="headerlink" title="让数字的字面值看起来像对象"></a>让数字的字面值看起来像对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>toString(); <span class="comment">// Uncaught SyntaxError: Invalid or unexpected token</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>.toString(); <span class="comment">// 第二个点号可以正常解析</span></span><br><span class="line"><span class="number">2</span> .toString(); <span class="comment">// 注意点号前面的空格</span></span><br><span class="line">(<span class="number">2</span>).toString(); <span class="comment">// 2先被计算</span></span><br></pre></td></tr></table></figure><h4 id="对象可计算属性名-仅在ES6中"><a href="#对象可计算属性名-仅在ES6中" class="headerlink" title="对象可计算属性名(仅在ES6中)"></a>对象可计算属性名(仅在ES6中)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> suffix = <span class="string">' name'</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  [<span class="string">'first'</span> + suffix]: <span class="string">'Nicholas'</span>,</span><br><span class="line">  [<span class="string">'last'</span> + suffix]: <span class="string">'Zakas'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person[<span class="string">'first name'</span>]; <span class="comment">// "Nicholas"</span></span><br><span class="line">person[<span class="string">'last name'</span>]; <span class="comment">// "Zakas"</span></span><br></pre></td></tr></table></figure><h4 id="数字四舍五入"><a href="#数字四舍五入" class="headerlink" title="数字四舍五入"></a>数字四舍五入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v: 值，p: 精度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">v, p</span>) </span>&#123;</span><br><span class="line">  p = <span class="built_in">Math</span>.pow(<span class="number">10</span>, p &gt;&gt;&gt; <span class="number">31</span> ? <span class="number">0</span> : p | <span class="number">0</span>)</span><br><span class="line">  v *= p;</span><br><span class="line">  <span class="keyword">return</span> (v + <span class="number">0.5</span> + (v &gt;&gt; <span class="number">31</span>) | <span class="number">0</span>) / p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">round(<span class="number">123.45353</span>, <span class="number">2</span>); <span class="comment">// 123.45</span></span><br></pre></td></tr></table></figure><h4 id="在浏览器中根据url下载文件"><a href="#在浏览器中根据url下载文件" class="headerlink" title="在浏览器中根据url下载文件"></a>在浏览器中根据url下载文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isChrome = navigator.userAgent.toLowerCase().indexOf(<span class="string">'chrome'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">var</span> isSafari = navigator.userAgent.toLowerCase().indexOf(<span class="string">'safari'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isChrome || isSafari) &#123;</span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    link.href = url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (link.download !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> fileName = url.substring(url.lastIndexOf(<span class="string">'/'</span>) + <span class="number">1</span>, url.length);</span><br><span class="line">      link.download = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.createEvent) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</span><br><span class="line">      e.initEvent(<span class="string">'click'</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">      link.dispatchEvent(e);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (url.indexOf(<span class="string">'?'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">    url += <span class="string">'?download'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.open(url, <span class="string">'_self'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="快速生成UUID"><a href="#快速生成UUID" class="headerlink" title="快速生成UUID"></a>快速生成UUID</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uuid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">  <span class="keyword">var</span> uuid = <span class="string">'xxxxxxxxxxxx-4xxx-yxxx-xxxxxxxxxxxx'</span>.replace(<span class="regexp">/[xy]/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = (d + <span class="built_in">Math</span>.random() * <span class="number">16</span>) % <span class="number">16</span> | <span class="number">0</span>;</span><br><span class="line">    d = <span class="built_in">Math</span>.floor(d / <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (c == <span class="string">'x'</span> ? r : (r &amp; <span class="number">0x3</span> | <span class="number">0x8</span>)).toString(<span class="number">16</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> uuid;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">uuid(); <span class="comment">// "33f7f26656cb-499b-b73e-89a921a59ba6"</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript浮点数精度问题"><a href="#JavaScript浮点数精度问题" class="headerlink" title="JavaScript浮点数精度问题"></a>JavaScript浮点数精度问题</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEqual</span>(<span class="params">n1, n2, epsilon</span>) </span>&#123;</span><br><span class="line">  epsilon = epsilon == <span class="literal">undefined</span> ? <span class="number">10</span> : epsilon; <span class="comment">// 默认精度为10</span></span><br><span class="line">  <span class="keyword">return</span> n1.toFixed(epsilon) === n2.toFixed(epsilon);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>; <span class="comment">// 0.30000000000000004</span></span><br><span class="line">isEqual(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.7</span> + <span class="number">0.1</span> + <span class="number">99.1</span> + <span class="number">0.1</span>; <span class="comment">// 99.99999999999999</span></span><br><span class="line">isEqual(<span class="number">0.7</span> + <span class="number">0.1</span> + <span class="number">99.1</span> + <span class="number">0.1</span>, <span class="number">100</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="格式化表单数据"><a href="#格式化表单数据" class="headerlink" title="格式化表单数据"></a>格式化表单数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatParam</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> query = <span class="string">''</span>, name, value, fullSubName, subName, subValue, innerObj, i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(name <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    value = obj[name];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;value.length; ++i) &#123;</span><br><span class="line">        subValue = value[i];</span><br><span class="line">        fullSubName = name + <span class="string">'['</span> + i + <span class="string">']'</span>;</span><br><span class="line">        innerObj = &#123;&#125;;</span><br><span class="line">        innerObj[fullSubName] = subValue;</span><br><span class="line">        query += formatParam(innerObj) + <span class="string">'&amp;'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(value <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span>(subName <span class="keyword">in</span> value) &#123;</span><br><span class="line">        subValue = value[subName];</span><br><span class="line">        fullSubName = name + <span class="string">'['</span> + subName + <span class="string">']'</span>;</span><br><span class="line">        innerObj = &#123;&#125;;</span><br><span class="line">        innerObj[fullSubName] = subValue;</span><br><span class="line">        query += formatParam(innerObj) + <span class="string">'&amp;'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(value !== <span class="literal">undefined</span> &amp;&amp; value !== <span class="literal">null</span>)</span><br><span class="line">      query += <span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(value) + <span class="string">'&amp;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> query.length ? query.substr(<span class="number">0</span>, query.length - <span class="number">1</span>) : query;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> param = &#123;</span><br><span class="line">  name: <span class="string">'jenemy'</span>,</span><br><span class="line">  likes: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">  memberCard: [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'1'</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'2'</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">formatParam(param); <span class="comment">// "name=12&amp;likes%5B0%5D=0&amp;likes%5B1%5D=1&amp;likes%5B2%5D=3&amp;memberCard%5B0%5D%5Btitle%5D=1&amp;memberCard%5B0%5D%5Bid%5D=1&amp;memberCard%5B1%5D%5Btitle%5D=2&amp;memberCard%5B1%5D%5Bid%5D=2"</span></span><br></pre></td></tr></table></figure><h4 id="创建指定长度非空数组"><a href="#创建指定长度非空数组" class="headerlink" title="创建指定长度非空数组"></a>创建指定长度非空数组</h4><p>在JavaScript中可以通过<code>new Array(3)</code>的形式创建一个长度为3的空数组。在老的Chrome中其值为[undefined x 3]，在最新的Chrome中为[empty x 3]，即空单元数组。在老Chrome中，相当于显示使用<code>[undefined, undefined, undefined]</code>的方式创建长度为3的数组。</p><p>但是，两者在调用<code>map()</code>方法的结果是明显不同的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> b = [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line">a.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> i); <span class="comment">// [empty × 3]</span></span><br><span class="line">b.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> i); <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure><p>多数情况我们期望创建的是包含<code>undefined</code>值的指定长度的空数组，可以通过下面这种方法来达到目的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">3</span> &#125;);</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// [undefined, undefined, undefined]</span></span><br><span class="line">a.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> i); <span class="comment">// [0, 1, 2]</span></span><br></pre></td></tr></table></figure><p>总之，尽量不要创建和使用空单元数组。</p><h4 id="debounce方法"><a href="#debounce方法" class="headerlink" title="debounce方法"></a>debounce方法</h4><p><code>debounce()</code>方法用来延迟执行函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> debounce = <span class="function"><span class="keyword">function</span> (<span class="params">func, threshold, execAsap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">debounced</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">this</span>, args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">delayed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!execAsap)</span><br><span class="line">        func.apply(obj, args);</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timeout)</span><br><span class="line">      clearTimeout(timeout);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (execAsap)</span><br><span class="line">      func.apply(obj, args);</span><br><span class="line"></span><br><span class="line">    timeout = setTimeout(delayed, threshold || <span class="number">100</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="判断客户端"><a href="#判断客户端" class="headerlink" title="判断客户端"></a>判断客户端</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> browser = &#123;</span><br><span class="line">    v: (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> u = navigator.userAgent,</span><br><span class="line">            app = navigator.appVersion,</span><br><span class="line">            p = navigator.platform;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            trident: u.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span>, <span class="comment">//IE内核</span></span><br><span class="line">            presto: u.indexOf(<span class="string">'Presto'</span>) &gt; <span class="number">-1</span>, <span class="comment">//opera内核</span></span><br><span class="line">            webKit: u.indexOf(<span class="string">'AppleWebKit'</span>) &gt; <span class="number">-1</span>, <span class="comment">//苹果、谷歌内核</span></span><br><span class="line">            gecko: u.indexOf(<span class="string">'Gecko'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'KHTML'</span>) == <span class="number">-1</span>, <span class="comment">//火狐内核</span></span><br><span class="line">            mobile: !!u.match(<span class="regexp">/AppleWebKit.*Mobile.*/</span>), <span class="comment">//是否为移动终端</span></span><br><span class="line">            ios: !!u.match(<span class="regexp">/i[^;]+;( U;)? CPU.+Mac OS X/</span>), <span class="comment">//ios终端</span></span><br><span class="line">            android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>, <span class="comment">//android终端或uc浏览器</span></span><br><span class="line">            iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为iPhone或者QQHD浏览器</span></span><br><span class="line">            iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否iPad</span></span><br><span class="line">            weixin: u.indexOf(<span class="string">'MicroMessenger'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否微信</span></span><br><span class="line">            webApp: u.indexOf(<span class="string">'Safari'</span>) == <span class="number">-1</span>, <span class="comment">//是否web应该程序，没有头部与底部</span></span><br><span class="line">            UCB: u.match(<span class="regexp">/UCBrowser/i</span>) == <span class="string">"UCBrowser"</span>,</span><br><span class="line">            QQB: u.match(<span class="regexp">/MQQBrowser/i</span>) == <span class="string">"MQQBrowser"</span>,</span><br><span class="line">            win: p.indexOf(<span class="string">'Win'</span>) &gt; <span class="number">-1</span>, <span class="comment">//判断是否是WIN操作系统</span></span><br><span class="line">            mac: p.indexOf(<span class="string">'Mac'</span>) &gt; <span class="number">-1</span> <span class="comment">//判断是否是Mac操作系统</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;浮点数取整&quot;&gt;&lt;a href=&quot;#浮点数取整&quot; class=&quot;headerlink&quot; title=&quot;浮点数取整&quot;&gt;&lt;/a&gt;浮点数取整&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://csjiabin.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://csjiabin.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>用图标和示例解释Await和Async</title>
    <link href="https://csjiabin.github.io/2018/08/18/%E7%94%A8%E5%9B%BE%E6%A0%87%E5%92%8C%E7%A4%BA%E4%BE%8B%E8%A7%A3%E9%87%8AAwait%E5%92%8CAsync/"/>
    <id>https://csjiabin.github.io/2018/08/18/用图标和示例解释Await和Async/</id>
    <published>2018-08-18T12:58:31.000Z</published>
    <updated>2018-09-17T02:07:56.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>JavaScript ES7 中的 async / await 让多个异步 promise 协同工作起来更容易。如果要按一定顺序从多个数据库或者 API 异步获取数据，你可能会以一堆乱七八糟的 promise 和回调函数而告终。而 async / await 结构让我们能用可读性强、易维护的代码更加简洁地实现这些逻辑。</p><p>本教程用图表和简单示例讲解了 JavaScript 中 async / await 的语法和语义。</p><p>在深入之前，我们先简单回顾一下 promise. 如果你已经对 JS 的 promise 有所了解，可放心大胆地跳过这一部分。</p><h4 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h4><p>在 JavaScript 中，promise 代表非阻塞异步执行的抽象概念。如果你熟悉 Java 的 Future、C# 的 Task, 你会发现 promise 跟它们很像。</p><p>Promise 一般用于网络和 I/O 操作，比如读取文件，或者创建 HTTP 请求。我们可以创建异步 promise，然后用 then 添加一个回调函数，当 promise 结束后会触发这个回调函数，而非阻塞住当前“线程”。回调函数本身也可以返回一个 promise 对象，所以我们能够链式调用 promise。</p><p>为了简单起见，我们假设后面所有示例都已经像这样安装并加载了 request-promise 类库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rp = <span class="built_in">require</span>(<span class="string">"request-promise"</span>);</span><br></pre></td></tr></table></figure><p>现在我们就可以像这样创建一个返回 promise 对象的简易 HTTP GET 请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = rp(<span class="string">"http://example.com/"</span>);</span><br></pre></td></tr></table></figure><p>我们现在来看个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Starting Execution"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = rp(<span class="string">"http://example.com/"</span>);</span><br><span class="line">promise.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Can't know if promise has finished yet..."</span>);</span><br></pre></td></tr></table></figure><p>我们在第 3 行创建了一个 promise 对象，在第 4 行给它加了个回调函数。Promise 是异步的，所以当执行到第 6 行时，我们并不知道 promise 是否已完成。如果把段这代码多执行几次，可能每次都得到不同的结果。一般地说，就是 promise 创建后的代码和 promise 是同时运行的。</p><p>直到 promise 执行完，才有办法阻塞当前操作序列。这不同于 Java 的 Future.get, 它让我们能够在 Future 结束之前就阻塞当前线程。对于 JavaScript，我们没法等待 promise 执行完。在 promise 后面编排代码的唯一方法是用 then 给它添加回调函数。</p><p>下图描述了本例的计算过程：</p><p><img src="/uploads/post/post-async-await-0.jpg" alt=""></p><p>Promise 的计算过程。正在执行的“线程”无法等待 promise 执行完成。在 promise 后面编排代码的唯一方法是用 then 给它添加回调函数。</p><p>通过 then 添加的回调函数只有当 promise 成功时才会执行。如果它失败了（比如由于网络错误），回调函数不会执行。你可以用 catch 再附加一个回调函数来处理失败的 promise:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rp(<span class="string">"http://example.com/"</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Success"</span>))</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Failed: <span class="subst">$&#123;e&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>最后，为了测试，我们可以用 Promise.resolve 和 Promise.reject 很容易地创建执行成功或失败的“傻瓜” promise:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> success = <span class="built_in">Promise</span>.resolve(<span class="string">"Resolved"</span>);</span><br><span class="line"><span class="comment">// 打印 "Successful result: Resolved"</span></span><br><span class="line">success</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Successful result: <span class="subst">$&#123;result&#125;</span>`</span>))</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Failed with: <span class="subst">$&#123;e&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fail = <span class="built_in">Promise</span>.reject(<span class="string">"Err"</span>);</span><br><span class="line"><span class="comment">// 打印 "Failed with: Err"</span></span><br><span class="line">fail</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Successful result: <span class="subst">$&#123;result&#125;</span>`</span>))</span><br><span class="line">  .catch(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Failed with: <span class="subst">$&#123;e&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>想要更详细的 promise 教程，可以参考这篇文章。</p><h4 id="问题来了——组合-promise"><a href="#问题来了——组合-promise" class="headerlink" title="问题来了——组合 promise"></a>问题来了——组合 promise</h4><p>只用一个 promise 很容易搞定。但是，当需要针对复杂异步逻辑编程时，我们很可能最后要同时用好几个 promise 对象。写一堆 then 语句和匿名回调很容易搞得难以控制。</p><p>例如，假设我们需要编程解决如下需求：</p><ol><li>创建 HTTP 请求，等待请求结束并打印出结果；</li><li>再创建两个并行 HTTP 请求；</li><li>等这两个请求结束后，打印出它们的结果。</li></ol><p>下面这段代码示范了如何解决此问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次调用</span></span><br><span class="line"><span class="keyword">const</span> call1Promise = rp(<span class="string">"http://example.com/"</span>);</span><br><span class="line"></span><br><span class="line">call1Promise</span><br><span class="line">  .then(<span class="function"><span class="params">result1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 第一个请求完成后会执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(result1);</span><br><span class="line">    <span class="keyword">const</span> call2Promise = rp(<span class="string">"http://example.com/"</span>);</span><br><span class="line">    <span class="keyword">const</span> call3Promise = rp(<span class="string">"http://example.com/"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([call2Promise, call3Promise]);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 两个 promise 都结束后会执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">1</span>]);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>我们开头创建了第一个 HTTP 请求，并且加了个完成时候运行的回调（1-3 行）。在这个回调函数里，我们为随后的 HTTP 请求创建了另外两个 promise（8-9 行）。这两个 promise 同时执行，我们需要加一个能等它们都完成后才执行的回调函数。因此，我们需要用 Promise.all 将它们组合到同一个 promise 中（11 行），它们都结束后这个 promise 才算完成。这个回调返回的是 promise 对象，所以我们要再加一个 then 回调函数来打印结果（12-16 行）。</p><p>下图描述了这一计算流程：</p><p><img src="/uploads/post/post-async-await-1.jpg" alt=""></p><p>Promise 组合的计算过程。我们用 Promise.all 将两个并行的 promise 组合到一个 promise 中。</p><p>对于这个简单的例子，我们最后用了两个 then 回调方法，并且不得不用 Promise.all 来让两个并行的 promise 同时执行。如果我们必须执行更多异步操作，或者加上错误处理会怎么样呢？这种方法最后很容易产生一堆乱七八糟的 then, Promise.all 和回调函数。</p><h4 id="Async-方法"><a href="#Async-方法" class="headerlink" title="Async 方法"></a>Async 方法</h4><p>Async 是定义返回 promise 对象函数的快捷方法。</p><p>例如，下面这两种定义是等价的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">"TEST"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// asyncF 和 f 是等价的</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"TEST"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似地，抛出异常的 async 方法等价于返回拒绝 promise 的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="string">"Error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// asyncF 和 f 是等价的</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncF</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Await"><a href="#Await" class="headerlink" title="Await"></a>Await</h4><p>我们创建了 promise 但不能同步等待它执行完成。我们只能通过 then 传一个回调函数。不允许等待 promise 是为了鼓励开发非阻塞代码。否则，开发者们总会忍不住执行阻塞操作，因为那比使用 promise 和回调更简单。</p><p>然而，为了让 promise 能同步执行，我们需要让他们等待彼此完成。换句话说，如果一个操作是异步的（即封装在 promise 中），它应该能够等待另一个异步操作执行完。但是 JavaScript 解释器怎么能知道一个操作是否在 promise 中运行呢？</p><p>答案就在 async 这个关键词中。每个 async 方法都返回一个 promise 对象。因此，JavaScript 解释器就明白所有 async 方法中的操作都被封装在 promise 里异步执行。所以解释器能够允许它们等待其他 promise 执行完。</p><p>下面引入 await 关键词。它只能被用在 async 方法中，让我们能同步等待 promise 执行完。如果在 async 函数外使用 promise, 我们仍然需要用 then 回调函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// response 就是 promise 执行成功的值</span></span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> rp(<span class="string">"http://example.com/"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能在 async 方法外面用 await</span></span><br><span class="line"><span class="comment">// 需要使用 then 回调函数……</span></span><br><span class="line">f().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Finished"</span>));</span><br></pre></td></tr></table></figure><p>现在我们来看如何解决上一节的问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将解决方法封装到 async 函数中</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 等待第一个 HTTP 请求并打印出结果</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">await</span> rp(<span class="string">"http://example.com/"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建两个 HTTP 请求，不等它们执行完 —— 让他们同时执行</span></span><br><span class="line">  <span class="keyword">const</span> call2Promise = rp(<span class="string">"http://example.com/"</span>); <span class="comment">// Does not wait!</span></span><br><span class="line">  <span class="keyword">const</span> call3Promise = rp(<span class="string">"http://example.com/"</span>); <span class="comment">// Does not wait!</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建完以后 —— 等待它们都执行完</span></span><br><span class="line">  <span class="keyword">const</span> response2 = <span class="keyword">await</span> call2Promise;</span><br><span class="line">  <span class="keyword">const</span> response3 = <span class="keyword">await</span> call3Promise;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(response2);</span><br><span class="line">  <span class="built_in">console</span>.log(response3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用这一 async 函数</span></span><br><span class="line">solution().then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Finished"</span>));</span><br></pre></td></tr></table></figure><p>上面这段代码中，我们把解决方法封装到 async 函数中。这让我们能直接对里面的 promise 使用 await 关键字，所以不再需要使用 then 回调函数。最后，调用这个 async 函数，它简单地创建了一个 promise 对象, 这个 promise 封装了调用其他 promise 的逻辑。</p><p>当然，在第一个例子（没有用 async / await）中，两个 promise 会被同时触发。这段代码也一样（7-8 行）。注意，直到第 11-12 行我们才使用 await, 将程序一直阻塞到两个 promise 执行完成。然后我们就能断定上例中两个 promise 都成功执行了（和使用 Promise.all(…).then(…) 类似）。</p><p>这背后的计算过程跟上一节给出的基本相当。但是代码可读性更强、更易于理解。</p><p>实际上，async / await 在底层转换成了 promise 和 then 回调函数。也就是说，这是使用 promise 的语法糖。每次我们使用 await, 解释器都创建一个 promise 对象，然后把剩下的 async 函数中的操作放到 then 回调函数中。</p><p>我们再看看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Starting F"</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> rp(<span class="string">"http://example.com/"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面给出了函数 f 底层运算过程。由于 f 是 async 的，所以它会跟它的调用方同时执行：</p><p><img src="/uploads/post/post-async-await-2.jpg" alt=""></p><div style="text-align:center;">Await 的计算过程</div><p>函数 f 开始运行并创建了一个 promise 对象。就在那一刻，函数中剩下的部分被封装到一个回调函数中，并在 promise 结束后执行。</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>前面大部分例子中，我们都假设 promise 执行成功。因此在 promise 上使用 await 会返回值。如果我们进行 await 的 promise 失败了，async 函数就会发生异常。我们可以用标准的 try / catch 来处理这种情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promiseResult = <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">"Error"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Async 函数不会处理异常，不管异常是由拒绝的 promise 还是其他 bug 引起的，它都会返回一个拒绝 promise:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Throws an exception</span></span><br><span class="line">  <span class="keyword">const</span> promiseResult = <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">"Error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will print "Error"</span></span><br><span class="line">f()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Success"</span>))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">"Error"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will print "Error"</span></span><br><span class="line">g()</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Success"</span>))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>Async / await 是让 promise 更完美的语言结构。它让我们能用更少的代码使用 promise. 然而，async / await 并没有取代普通 promise. 例如，如果在普通函数中或者全局范围内调用 async 函数，我们就没办法使用 await 而要依赖于普通 promise:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// actual return value is Promise.resolve(5)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// can't call "await fAsync()". Need to use then/catch</span></span><br><span class="line">fAsync().then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`result is <span class="subst">$&#123;r&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>我通常会将大部分异步逻辑封装到一个或者几个 async 函数中，然后在非异步代码中调用。这让我尽可能少地写 try / catch 回调。</p><p>Async / await 结构是让使用 promise 更简练的语法糖。每一个 async / await 结构都可以写成普通 promise. 归根结底，这是一个编码风格和简洁的问题。</p><p>关于说明并发和并行有区别的资料，可以查看 Rob Pike 关于这个问题的讨论，或者我这篇文章。并发是指将独立进程（通常意义上的进程）组合在一起工作，而并行是指真正同时处理多个任务。并发关乎应用设计和架构，而并行关乎实实在在的执行。</p><p>我们拿一个多线程应用来举例。应用程序分离成线程明确了它的并发模型。这些线程在可用内核上的映射定义了其级别或并行性。并发系统可以在单个处理器上高效运行，在这种情况下，它并不是并行的。</p><p><img src="/uploads/post/post-async-await-3.jpg" alt=""></p><h4 id="并发-VS-并行"><a href="#并发-VS-并行" class="headerlink" title="并发 VS 并行"></a>并发 VS 并行</h4><p>从这个意义上说，promise 让我们能够将程序分解成并发模块，这些模块可能会也可能不会并行执行。Javascript 实际否并行执行取决于具体实现方法。例如，Node JS 是单线程的，如果 promise 是计算密集型（CPU bound）那就不会有并行处理。但是，如果你用 Nashorn 之类的东西把代码编译成 java 字节码，理论上可能能够将计算密集型的 promise 映射到不同 CPU 核上，从而达到并行效果。所以我认为，promise（不管是普通的还是用了 async / await 的）组成了 JavaScript 应用的并发模块。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;JavaScript ES7 中的 async / await 让多个异步 promise 协同工作起来更容易。如果要按一定顺序从多个数据库
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://csjiabin.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://csjiabin.github.io/tags/js/"/>
    
      <category term="es7" scheme="https://csjiabin.github.io/tags/es7/"/>
    
      <category term="promise" scheme="https://csjiabin.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>Hexo,创建属于你自己的博客</title>
    <link href="https://csjiabin.github.io/2018/08/16/Hexo-%E5%88%9B%E5%BB%BA%E5%B1%9E%E4%BA%8E%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>https://csjiabin.github.io/2018/08/16/Hexo-创建属于你自己的博客/</id>
    <published>2018-08-16T14:58:09.000Z</published>
    <updated>2018-09-17T03:29:07.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>欢迎来到 Hexo！该文章非常适合不懂前端的人搭建自己的博客，接下来我会讲解我为什么会选择<code>hexo</code>和<code>hexo</code>博客搭建步奏。最近想要搞个个人博客，因为不想自己搞站点，所以找到了<code>github pages</code>，它提供给我们域名和空间，多省事啊。那静态页面用什么工具呢？一开始我用的是<code>jekyll</code>,然后我有了那句经典的感受，那句话是从入门到放弃，啊，多么痛的领悟！</p><h4 id="下面我来扒一扒："><a href="#下面我来扒一扒：" class="headerlink" title="下面我来扒一扒："></a>下面我来扒一扒：</h4><ol><li><code>jekyll</code>需要安装<code>ruby</code>,<code>python</code>等，<code>hexo</code>需要<code>nodejs</code>，当然为了 push 到 github 都需要装个<code>git</code>,速度上<code>jekyll</code>生成静态站点的速度比<code>hexo</code>慢多了，如果你时间多。</li><li>便捷性，<code>hexo</code>完爆<code>jekyll</code>，同样是 quick start，虽然都是几个命令，就可以预览效果了，但是效果差了十万八千里。</li><li>插件和样式，你写完 post，想做个 categories？对于<code>hexo</code>就是 so easy，在你的文章前面的使用 category: 分类名，<code>hexo</code>就给你在右边生成，包括分类主页，默认样式，你啥都不用干。而<code>jekyll</code>需要自己写标签语言遍历然后在创建各个分类的主页，在设置页面 css，或者用 ruby 写插件去搞，这下老子要骂娘了，我他妈根本不会 ruby 啊，官方为什么不主动提供好现成的插件？我只是个后端工程师，不是全栈，页面+css 真的玩不来，不知道提供些 theme 供人选择？</li></ol><blockquote><p>废话不多说，接下来会以我的博客为例子搭建一个 hexo 的 github pages！</p></blockquote><h3 id="Hexo-相关命令总结"><a href="#Hexo-相关命令总结" class="headerlink" title="Hexo 相关命令总结"></a>Hexo 相关命令总结</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo init #初始化一个项目</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo new page "xxx" #生成页面</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo new "" #生成文章</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo clean #清除缓存</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo s  #启动本地服务</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo g  #保存修改，生成文件</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> hexo d  #发布到远程</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> npm install --save xxx  #安装插件</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span> npm unstall xxx #卸载插件</span><br></pre></td></tr></table></figure><p>上述命令将贯穿于整个博客过程，不难，能动手尽量别复制粘贴</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li><li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><h4 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h4><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><h4 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h4><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。</p><p>cURL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><blockquote><p><strong>Windows 用户</strong><br>对于 windows 用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。<br>另外，您也可以使用<strong>Git Bash</strong>，这是 git for windows 自带的一组程序，提供了 Linux 风格的 shell，在该环境下，您可以直接用上面提到的命令来安装 Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于 Hexo 的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p></blockquote><h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>在这里以<a href="/hux/">HUX博客</a>主题为例子(也可以按 hexo 官方文档进行搭建)，移植的主题 <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">Hux Blog</a>，我为了您的方便而发布整个项目，因此您只需按照下面的说明操作，即可轻松自定义您自己的博客！ 让我们开始！！！<br><img src="/uploads/post/WX20180826-004151@2x.png" alt=""></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/csjiabin/hexo-theme-hux.git</span><br><span class="line">cd hexo-theme-hux</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4><p>你可以通用修改 <code>_config.yml</code> 文件来轻松的开始搭建自己的博客:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">xxx</span> <span class="comment"># 博客名，站点名称</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">xxx</span> <span class="comment"># 博客作者名字 #</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">xxx</span> <span class="comment"># 对站点的描述，搜索引擎会抓取，可以自定义</span></span><br><span class="line"><span class="attr">keyword:</span> <span class="string">xxx</span> <span class="comment"># 向搜索引擎说明你的网页的关键词</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">huxblog</span> <span class="comment"># themes目录下的主题目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 您可以决定是否显示侧边栏</span></span><br><span class="line"><span class="comment"># Sidebar settings</span></span><br><span class="line"><span class="attr">sidebar:</span> <span class="literal">true</span> <span class="comment"># whether or not using Sidebar.</span></span><br><span class="line"><span class="attr">sidebar-about-description:</span> <span class="string">"Goals determine what you going to be!!"</span></span><br><span class="line"><span class="attr">sidebar-avatar:</span> <span class="attr">https://avatars1.githubusercontent.com/u/20592953?s=460&amp;v=4</span> <span class="comment"># use absolute URL, seeing it's used in both `/` and `/about/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 您可以决定是否显示帖子标签。</span></span><br><span class="line"><span class="comment"># Featured Tags</span></span><br><span class="line"><span class="attr">featured-tags:</span> <span class="literal">true</span> <span class="comment"># whether or not using Feature-Tags</span></span><br></pre></td></tr></table></figure><h4 id="撰写博文"><a href="#撰写博文" class="headerlink" title="撰写博文"></a>撰写博文</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;post name&gt;  # 或者`hexo new &lt;post name&gt;`生成文章</span><br></pre></td></tr></table></figure><p>要发表的文章一般以 <code>Markdown</code> 的格式放在这里<code>_posts/</code>，你只要看看这篇模板里的文章你就立刻明白该如何设置。</p><blockquote><p>不同<code>Markdown</code>格式语法的可以看这篇 <a href="/2018/08/26/Markdown%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/">文章 &rarr;</a></p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">"&lt;post name&gt;"</span></span><br><span class="line"><span class="attr">catalog:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">CSjiabin</span></span><br><span class="line"><span class="attr">header-img:</span> <span class="string">/img/home-bg.jpg</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-08</span><span class="bullet">-16</span> <span class="number">22</span><span class="string">:58:09</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>启动本地服务调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><blockquote><p>–debug 调试模式，会监听文件的变动进行重启，但不会监听最外层的<code>_config.yml</code>文件</p></blockquote><h4 id="开启评论功能"><a href="#开启评论功能" class="headerlink" title="开启评论功能"></a>开启评论功能</h4><ul><li>首先，你需要去注册一个 Disqus 帐号。不要直接使用我的啊！</li><li>其次，你只需要在下面的 <code>_config.yml</code> 文件中设置一下就可以了。</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 评论系统</span></span><br><span class="line"><span class="comment"># Disqus（https://disqus.com/)</span></span><br><span class="line"><span class="attr">disqus_username:</span> <span class="string">csjiabin</span></span><br></pre></td></tr></table></figure><blockquote><p>另外你可以其他评论系统使用，例： <code>Gitalk</code>、<code>多说</code> 等</p></blockquote><h3 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h3><p>上面所有的操作完成之后，你就可以将你的 Blog 项目部署到 github 上了。<br>部署之前先修改<code>_config.yml</code>文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="attr">https://github.com/&lt;yourAccount&gt;/&lt;repo&gt;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">&lt;your-branch&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>备注：在 hexo3.x 版本下，这里的 type 应该填 git，不是 github；另外冒号后面都有一个英文的空格，不然会报错的。</p></blockquote><p>配置完<code>_config.yml</code>文件后，在命令后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate(g)   # 把文章生成页面</span><br><span class="line">hexo deploy(d)    # 部署到github可与hexo g合并为 hexo d -g</span><br></pre></td></tr></table></figure><h3 id="Have-fun"><a href="#Have-fun" class="headerlink" title="Have fun ^_^"></a>Have fun ^_^</h3><p>如果你喜欢这个项目请给我点个<a href="https://github.com/csjiabin/csjiabin.github.io/stargazers" target="_blank" rel="noopener">Star</a>吧！<a href="https://github.com/csjiabin" target="_blank" rel="noopener">Following</a> 也将不胜感激!<br>如有其他疑问可以给我留言，我会第一时间为您解答！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;欢迎来到 Hexo！该文章非常适合不懂前端的人搭建自己的博客，接下来我会讲解我为什么会选择&lt;code&gt;hexo&lt;/code&gt;和&lt;code&gt;h
      
    
    </summary>
    
      <category term="hexo" scheme="https://csjiabin.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://csjiabin.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://csjiabin.github.io/tags/github/"/>
    
      <category term="node" scheme="https://csjiabin.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://csjiabin.github.io/2018/08/16/hello-world/"/>
    <id>https://csjiabin.github.io/2018/08/16/hello-world/</id>
    <published>2018-08-16T05:30:29.000Z</published>
    <updated>2018-09-16T12:30:09.543Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="other" scheme="https://csjiabin.github.io/categories/other/"/>
    
    
  </entry>
  
</feed>
